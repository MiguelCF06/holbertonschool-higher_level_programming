#doctest-7-base_geometry.py
""" Test Driven Development """

Importing the class from the module:
	    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> bg.area(21)
Traceback (most recent call last):
...
TypeError: area() takes 1 positional argument but 2 were given

>>> bg.integer_validator("MyInt", 1231)

>>> bg.integer_validator("number", -123)
Traceback (most recent call last):
...
ValueError: number must be greater than 0

>>> bg.integer_validator("num", 0)
Traceback (most recent call last):
...
ValueError: num must be greater than 0

>>> bg.integer_validator("my_dict", {"name": "Miguel"})
Traceback (most recent call last):
...
TypeError: my_dict must be an integer

>>> bg.integer_validator("my_list", [21, 23, 25])
Traceback (most recent call last):
...
TypeError: my_list must be an integer

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("num")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("num", 12, 124, 42, 24)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 3 positional arguments but 6 were given

>>> bg.integer_validator("bytes", b"bytes")
Traceback (most recent call last):
...
TypeError: bytes must be an integer

>>> bg.integer_validator("string", "hello")
Traceback (most recent call last):
...
TypeError: string must be an integer

>>> bg.integer_validator("bool", True)
Traceback (most recent call last):
...
TypeError: bool must be an integer

>>> b.integer_validator("complex", complex(1, 1))
Traceback (most recent call last):
...
TypeError: complex must be an integer

>>> b.integer_validator("tuple", (1, 2))
Traceback (most recent call last):
...
TypeError: tuple must be an integer
